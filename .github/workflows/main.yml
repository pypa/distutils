name: tests

on:
  merge_group:
  push:
    branches-ignore:
    # temporary GH branches relating to merge queues (jaraco/skeleton#93)
    - gh-readonly-queue/**
    tags:
    # required if branches-ignore is supplied (jaraco/skeleton#103)
    - '**'
  pull_request:
  workflow_dispatch:

concurrency:
  group: >-
    ${{ github.workflow }}-
    ${{ github.ref_type }}-
    ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # Environment variable to support color support (jaraco/skeleton#66)
  FORCE_COLOR: 1

  # Suppress noisy pip warnings
  PIP_DISABLE_PIP_VERSION_CHECK: 'true'
  PIP_NO_PYTHON_VERSION_WARNING: 'true'
  PIP_NO_WARN_SCRIPT_LOCATION: 'true'

  # Ensure tests can sense settings about the environment
  TOX_OVERRIDE: >-
    testenv.pass_env+=GITHUB_*,FORCE_COLOR

jobs:
  test:
    strategy:
      # https://blog.jaraco.com/efficient-use-of-ci-resources/
      matrix:
        python:
        - "3.9"
        - "3.13"
        platform:
        - ubuntu-latest
        - macos-latest
        - windows-latest
        include:
        - python: "3.10"
          platform: ubuntu-latest
        - python: "3.11"
          platform: ubuntu-latest
        - python: "3.12"
          platform: ubuntu-latest
        - python: "3.14"
          platform: ubuntu-latest
        - python: pypy3.10
          platform: ubuntu-latest
    runs-on: ${{ matrix.platform }}
    continue-on-error: ${{ matrix.python == '3.14' }}
    steps:
      - uses: actions/checkout@v4
      - name: Install build dependencies
        # Install dependencies for building packages on pre-release Pythons
        # jaraco/skeleton#161
        if: matrix.python == '3.14' && matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y libxml2-dev libxslt-dev
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          allow-prereleases: true
      - name: Install tox
        run: python -m pip install tox
      - name: Run
        run: tox

  collateral:
    strategy:
      fail-fast: false
      matrix:
        job:
        - diffcov
        - docs
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.python == '3.12' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install tox
        run: python -m pip install tox
      - name: Eval ${{ matrix.job }}
        run: tox -e ${{ matrix.job }}

  test_cygwin:
    strategy:
      matrix:
        python:
        - 39
        platform:
        - windows-latest
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Cygwin
        uses: cygwin/cygwin-install-action@v2
        with:
          platform: x86_64
          packages: >-
            python${{ matrix.python }},
            python${{ matrix.python }}-devel,
            python${{ matrix.python }}-pytest,
            python${{ matrix.python }}-pip,
            gcc-core,
            gcc-g++,
            zlib-devel,
            ncompress
            git
      - name: Install tox using pip
        shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}
        run: |
          # Workaround for https://github.com/pypa/setuptools/issues/4831
          python -m pip install tox
      - name: Run tests
        shell: C:\cygwin\bin\env.exe CYGWIN_NOWINPATH=1 CHERE_INVOKING=1 C:\cygwin\bin\bash.exe -leo pipefail -o igncr {0}
        run: python -m tox

  test_msys2_mingw:
    strategy:
      matrix:
        include:
          - { sys: mingw64, env: x86_64, cc: gcc, cxx: g++ }
          - { sys: mingw32, env: i686, cc: gcc, cxx: g++ }
          - { sys: ucrt64,  env: ucrt-x86_64, cc: gcc, cxx: g++ }
          - { sys: clang64, env: clang-x86_64, cc: clang, cxx: clang++}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          install: |
            mingw-w64-${{matrix.env}}-toolchain
            mingw-w64-${{matrix.env}}-python
            mingw-w64-${{matrix.env}}-python-pip
            mingw-w64-${{matrix.env}}-python-virtualenv
            mingw-w64-${{matrix.env}}-cc
            git
      - name: Install Dependencies
        shell: msys2 {0}
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          export VIRTUALENV_NO_SETUPTOOLS=1

          python -m virtualenv /tmp/venv
          source /tmp/venv/bin/activate

          # python-ruff doesn't work without rust
          sed -i '/pytest-ruff/d' pyproject.toml

          pip install -e .[test]
      - name: Run tests
        shell: msys2 {0}
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          source /tmp/venv/bin/activate
          pytest

  test_msvc_python_mingw:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Install tox
        run: python -m pip install tox
      - name: Install GCC
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          install: mingw-w64-ucrt-x86_64-cc
      - name: Run
        run: |
          $env:MSYS2_ROOT = msys2 -c 'cygpath -m /'
          $env:PATH = "$env:MSYS2_ROOT/ucrt64/bin;$env:PATH"
          $env:DISTUTILS_TEST_DEFAULT_COMPILER = "mingw32"
          tox

  ci_setuptools:
    # Integration testing with setuptools
    strategy:
      matrix:
        python:
        - "3.10"
        platform:
        - ubuntu-latest
    runs-on: ${{ matrix.platform }}
    env:
      SETUPTOOLS_USE_DISTUTILS: local
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install tox
        run: |
          python -m pip install tox
      - name: Check out pypa/setuptools
        uses: actions/checkout@v3
        with:
          repository: pypa/setuptools
          ref: main
          path: integration/setuptools
      - name: Replace vendored distutils
        run: |
          cd integration/setuptools/setuptools
          rm -rf _distutils
          cp -rp ../../../distutils _distutils
      - name: Run setuptools tests
        run: |
          cd integration/setuptools
          tox
        env:
          VIRTUALENV_NO_SETUPTOOLS: null

  check:  # This job does nothing and is only used for the branch protection
    if: always()

    needs:
    - test
    - collateral
    # disabled due to disabled job
    # - test_cygwin

    runs-on: ubuntu-latest

    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  release:
    permissions:
      contents: write
    needs:
    - check
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11-dev
      - name: Install tox
        run: python -m pip install tox
      - name: Run
        run: tox -e release
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
